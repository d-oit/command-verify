name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        echo "🧪 Running tests before release..."
        npm run test:coverage
        echo "✅ All tests passed"

    - name: Build project
      run: |
        echo "🔨 Building project..."
        npm run lint
        echo "✅ Build completed"

    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # First release - get all commits
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          # Subsequent release - get commits since last tag
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # Format changelog
        if [ -n "$CHANGELOG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## 🎉 Initial Release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "First stable release of Command Verify!" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
        echo "✅ Changelog generated"

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

    - name: Generate Release Assets
      run: |
        echo "📦 Creating release assets..."
        
        # Create distribution directory
        mkdir -p dist
        
        # Create npm package
        npm pack --pack-destination dist
        
        # Create source archive
        git archive --format=tar.gz --prefix=command-verify/ HEAD > dist/command-verify-${{ github.ref_name }}.tar.gz
        
        # Create zip archive
        git archive --format=zip --prefix=command-verify/ HEAD > dist/command-verify-${{ github.ref_name }}.zip
        
        # Generate checksums
        cd dist
        sha256sum * > checksums.txt
        cd ..
        
        echo "✅ Release assets created"

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/command-verify-${{ github.ref_name }}.tgz
        asset_name: command-verify-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip

    - name: Upload Source Archive (tar.gz)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/command-verify-${{ github.ref_name }}.tar.gz
        asset_name: command-verify-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Source Archive (zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/command-verify-${{ github.ref_name }}.zip
        asset_name: command-verify-${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: Update NPM (if not prerelease)
      if: github.event.inputs.prerelease != 'true'
      run: |
        echo "📦 Publishing to NPM..."
        npm publish
        echo "✅ Published to NPM"

    - name: Create GitHub Discussion
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDiscussion({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🎉 Release ${{ github.ref_name }} is now available!`,
            body: `## 🚀 What's New\n\n${{ steps.changelog.outputs.changelog }}\n\n## 📦 Installation\n\n\`\`\`bash\nnpm install command-verify@${{ github.ref_name }}\n\`\`\`\n\n## 🔗 Links\n\n- [NPM Package](https://www.npmjs.com/package/command-verify)\n- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})\n\n## 🐛 Issues?\n\nFound a bug? [Please report it](https://github.com/${{ github.repository }}/issues/new)!\n\n---\n\nThank you for using Command Verify! 🙏`,
            category: 'announcements'
          })

    - name: Notify Success
      run: |
        echo "🎉 Release ${{ github.ref_name }} completed successfully!"
        echo "📦 Assets uploaded to GitHub"
        echo "📝 Changelog generated"
        echo "🔗 Discussion created"
        echo ""
        echo "📊 Release Summary:"
        echo "- Version: ${{ github.ref_name }}"
        echo "- Assets: npm package, source archives, checksums"
        echo "- Documentation: Updated with changelog"
        echo "- Community: Discussion thread created"

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Update README badges
      run: |
        echo "📝 Updating documentation..."
        # Update version in README if needed
        sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${{ github.ref_name }}/g" README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "docs: update version to ${{ github.ref_name }}"
        git push
        echo "✅ Documentation updated"