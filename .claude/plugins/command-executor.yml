---
name: command-executor
description: |
  Optional plugin that extends command-verify skill to actually execute
  safe commands and capture real output. Only runs when explicitly requested.
version: 1.0.0
plugin_type: executor

# This plugin extends the command-verify skill
extends: command-verify

# Plugin configuration
config:
  auto_execute: false  # Never auto-run, always ask
  timeout_seconds: 300
  max_concurrent: 3
  capture_output: true
  sandbox_mode: true

# When to use this plugin
triggers:
  - pattern: "actually run the commands?"
  - pattern: "execute (the )?commands?"
  - pattern: "test if commands work"
  - pattern: "verify commands actually execute"

# Capabilities this plugin adds
capabilities:
  - command-execution
  - output-capture
  - performance-measurement
  - regression-detection

# Execution strategy
execution:
  pre_flight_checks:
    - git_status: "Ensure working directory is clean"
    - git_branch: "Warn if on main/master"
    - uncommitted_changes: "Ask before running if changes present"

  safety_rules:
    never_execute:
      - rm -rf
      - git push --force
      - npm run (clean|clear|reset)
      - drop database
      - truncate
      - delete

    require_confirmation:
      - npm install
      - npm run format
      - any command with --force
      - any command modifying files

    auto_execute:
      - npm run build
      - npm run test
      - npm run lint
      - npm run typecheck
      - git status
      - node --version

  execution_plan:
    description: |
      Before executing any commands, show user the plan:

      Execution Plan:
      ✓ npm run build (safe, will execute)
      ✓ npm run test (safe, will execute)
      ? npm install (conditional, will ask)
      ⊝ rm -rf node_modules (dangerous, will skip)

      Continue? [y/N]

    batch_mode: false  # Run commands sequentially
    fail_fast: true    # Stop on first failure
    rollback: false    # No automatic rollback

# Output capture
output:
  capture:
    stdout: true
    stderr: true
    exit_code: true
    duration: true
    timestamp: true

  storage:
    location: .cache/command-validations/executions
    format: json

    schema: |
      {
        "command": "npm run build",
        "executedAt": "2025-10-29T10:00:00Z",
        "duration": 2341,
        "exitCode": 0,
        "stdout": "...",
        "stderr": "",
        "success": true,
        "commit": "a1b2c3d"
      }

  comparison:
    enabled: true
    compare_against: "previous_execution"

    detect:
      - performance_regression: "duration > previous * 1.5"
      - new_errors: "stderr != previous.stderr"
      - output_changes: "stdout differs significantly"

# Integration with command-verify skill
integration:
  discovery:
    reuse: true  # Use command-verify's discovery

  cache:
    reuse: true  # Use command-verify's cache
    extend: true # Add execution results to cache

  validation:
    enhance: true  # Execution results improve validation confidence

# Reporting
reporting:
  format: |
    Execution Report:

    ✓ npm run build (2.3s)
      Output: Successfully compiled 42 files

    ✓ npm run test (4.5s)
      Output: 87 tests passed

    ? npm install (skipped - requires confirmation)

    ⊝ rm -rf node_modules (skipped - dangerous)

    Summary:
    - Executed: 2/4 commands
    - Success: 2/2
    - Duration: 6.8s
    - Performance: ✓ No regressions detected

  notify_on:
    - failures
    - performance_regressions
    - new_warnings
    - unexpected_output

# Example usage
examples:
  basic: |
    User: "Verify and execute the safe commands"

    Claude: I'll verify all commands in your documentation and execute
    the safe ones.

    [Runs command-verify skill]
    Found 23 commands, 15 are safe.

    [Shows execution plan]
    Will execute:
    ✓ npm run build
    ✓ npm run test
    ✓ npm run lint

    Continue? y

    [Executes commands]
    ✓ All 3 commands executed successfully
    ✓ No performance regressions

  with_comparison: |
    User: "Run the commands and compare to last time"

    Claude: I'll execute safe commands and compare results.

    [Executes and compares]

    ⚠️  Performance regression detected:
    - npm run build: 2.3s (was 1.8s, +28% slower)

    Possible causes:
    - More files to compile (42 vs 38)
    - Recent dependency updates

    Output is identical, no functional changes.

# Error handling
error_handling:
  command_fails:
    action: "Capture error, continue with remaining commands"
    save: "Store failure details for debugging"
    report: "Show clear error message with context"

  timeout:
    action: "Kill process, mark as timeout"
    duration: "Default 5 minutes, configurable per command"
    report: "Show which command timed out"

  permission_denied:
    action: "Skip command, report permission issue"
    suggest: "Check file permissions or run as appropriate user"

# Performance optimization
optimization:
  parallel_execution:
    enabled: false  # Sequential by default for safety
    max_workers: 3
    only_independent: true  # Only parallelize if no dependencies

  caching:
    strategy: "Reuse command-verify cache"
    invalidation: "Same rules as command-verify"

# Safety features
safety:
  sandbox:
    enabled: false  # Would require Docker/VM
    description: "Run in isolated environment"

  dry_run:
    enabled: true
    description: "Show what would be executed without running"

  confirmation:
    required_for:
      - first_time_execution
      - dangerous_category
      - production_branch

  audit_log:
    enabled: true
    location: .cache/command-validations/audit.log
    format: |
      [2025-10-29 10:00:00] npm run build - SUCCESS - 2.3s
      [2025-10-29 10:00:03] npm run test - SUCCESS - 4.5s

# Integration with CI/CD
ci_cd:
  github_actions:
    example: |
      - name: Verify and Execute Commands
        run: |
          npm run verify:execute
        env:
          AUTO_CONFIRM: true  # Skip confirmations in CI

  pre_release:
    enabled: true
    description: "Run before releases to ensure all commands work"

---